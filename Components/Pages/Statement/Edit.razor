@page "/statement/{Key:int}/edit"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = Security.Roles.Editor)]
@rendermode InteractiveServer
@using barber.Extensions;

@inject NavigationManager Navigation;
@inject Data.Repositories.IReadRepository _ReadRepository;
@inject Data.Repositories.IWriteRepository _WriteRepository;

<PageTitle>Edit Statement</PageTitle>

<a class="nav-link" href="/statement/list">Back to List</a>

@if (Statement == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form method="post" @onsubmit="Submit" @formname="statement-edit-form">
        <AntiforgeryToken />
        <div class="form-group">
            <label class="control-label">Key</label>
            <label class="form-control">@Statement!.StatementKey</label>
        </div>
        <div class="form-group">
            <label class="control-label">Description</label>
            <InputText class="form-control" @bind-Value="Statement!.Description" />
        </div>
        <div class="form-group">
            <label class="control-label">Statement Type</label>
            <InputSelect class="form-control" @bind-Value="Statement!.StatementType" @onchange="OnStatementTypeChanged">
                @foreach (var item in System.Enum.GetValues(typeof(barber.Enum.StatementType)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
        @if (Statement!.StatementType == barber.Enum.StatementType.Custom)
        {
            <div class="form-group">
                <label class="control-label">Statement Text</label>
                <InputText class="form-control" @bind-Value="Statement!.StatementText" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label class="control-label">Schema Name</label>
                <InputText class="form-control" @bind-Value="Statement!.SchemaName" />
            </div>
            <div class="form-group">
                <label class="control-label">Table Name</label>
                <InputText class="form-control" @bind-Value="Statement!.TableName" />
            </div>
        }
        <div class="form-group">
            <label class="control-label">Statement Detail JSON</label>
            <InputText class="form-control" @bind-Value="Statement!.StatementDetailJson" />
        </div>
        <div class="form-group">
            <label class="control-label">Check Database</label>
            <InputSelect class="form-control" @bind-Value="Statement!.CheckDatabaseKey">
                @foreach (var item in Databases!)
                {
                    <option value="@item.ItemKey">@item.ItemText</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">Edit</button>
        </div>
    </form>
}

@code {
    public System.Collections.Generic.IEnumerable<Data.Models.ListResponse>? Databases { get; set; }

    [Parameter]
    public int Key { get; set; }

    [Microsoft.AspNetCore.Components.SupplyParameterFromForm]
    public Data.Models.StatementRequest? Statement { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Databases = await _ReadRepository.SelectDatabaseList();
        var response = await _ReadRepository.SelectStatementByKey(Key);
        Statement = Data.Models.StatementRequest.Create(response);
    }

    private async System.Threading.Tasks.Task Submit()
    {
        if (Statement != null)
        {
            Statement.EditByUserName = "default";
            switch (Statement.StatementType)
            {
                case barber.Enum.StatementType.Custom:
                    Statement.SchemaName = null;
                    Statement.TableName = null;
                    break;
                default:
                    Statement.StatementText = null;
                    break;
            }
            var result = await _WriteRepository.UpdateStatement(Statement);
            Navigation.NavigateTo("/statement/list");
        }
    }

    private void OnStatementTypeChanged(ChangeEventArgs e)
    {
        Statement!.StatementType = e.Value.ToEnum<barber.Enum.StatementType>(barber.Enum.StatementType.None);
    }
}
