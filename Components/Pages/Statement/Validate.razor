@page "/statement/{Key:int}/validate"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = Security.Roles.Editor)]
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject Data.Repositories.IExecuteRepository _ExecuteRepository;
@inject Data.Repositories.IReadRepository _ReadRepository;
@inject Security.Services.IEncryptionService _EncryptionService;

<PageTitle>Validate Statement</PageTitle>

<a class="nav-link" href="/statement/list">Back to List</a>

@if (Statement == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form method="post" @onsubmit="Submit" @formname="statement-validate-form">
        <AntiforgeryToken />
        <div class="form-group">
            <label class="control-label">Key</label>
            <label class="form-control">@Statement!.StatementKey</label>
        </div>
        <div class="form-group">
            <label class="control-label">Description</label>
            <label class="form-control">@Statement!.Description</label>
        </div>
        <div class="form-group">
            <label class="control-label">Statement Type</label>
            <label class="form-control">@Statement!.StatementType</label>
        </div>
        <div class="form-group">
            <label class="control-label">Schema Name</label>
            <label class="form-control">@Statement!.SchemaName</label>
        </div>
        <div class="form-group">
            <label class="control-label">TableName</label>
            <label class="form-control">@Statement!.TableName</label>
        </div>
        <div class="form-group">
            <label class="control-label">Statement Text</label>
            <label class="form-control">@Statement!.StatementText</label>
        </div>
        <div class="form-group">
            <label class="control-label">Statement JSON</label>
            <label class="form-control">@Statement!.StatementJson</label>
        </div>
        <div class="form-group">
            <label class="control-label">Check Database</label>
            <label class="form-control">@Statement!.CheckDatabaseText</label>
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">Validate</button>
        </div>
    </form>
}

@if (Result != null)
{
    @if (Result.IsSuccessful)
    {
        <div class="alert alert-success">No Errors Detected</div>
    }
    else
    {
        <div class="alert alert-danger">Error: @Result.Exception?.Message</div>
    }
}

@code {
    [Parameter]
    public int Key { get; set; }

    public Data.Models.ExecuteResult? Result { get; set; }

    [Microsoft.AspNetCore.Components.SupplyParameterFromForm]
    public Data.Models.StatementResponse? Statement { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Statement = await _ReadRepository.SelectStatementByKey(Key);
    }

    private async System.Threading.Tasks.Task Submit()
    {
        if (Statement != null && Statement.StatementText != null)
        {
            var database = await _ReadRepository.SelectDatabaseByKey(Statement.CheckDatabaseKey);
            var password = string.IsNullOrWhiteSpace(database.PasswordHash) ? null : _EncryptionService.Decrypt(database.PasswordHash);
            var options = new Data.Models.ConnectionOptions(database.ServerName, database.DatabaseName, database.UserName, password);
            Result = _ExecuteRepository.ValidateStatement(Statement.StatementText, options);
        }
    }
}
