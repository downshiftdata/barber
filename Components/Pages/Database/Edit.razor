@page "/database/{Key:int}/edit"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject Data.Repositories.IReadRepository _ReadRepository;
@inject Data.Repositories.IWriteRepository _WriteRepository;
@inject Security.Services.ISecurityService _SecurityService;

<PageTitle>Edit Database</PageTitle>

<a class="nav-link" href="/database/list">Back to List</a>

@if (Database == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form method="post" @onsubmit="Submit" @formname="database-edit-form">
        <AntiforgeryToken />
        <div class="form-group">
            <label class="control-label">Key</label>
            <label class="form-control">@Database!.DatabaseKey</label>
        </div>
        <div class="form-group">
            <label class="control-label">Environment Type</label>
            <InputSelect class="form-control" @bind-Value="Database!.EnvironmentType">
                @foreach (var item in System.Enum.GetValues(typeof(barber.Enum.EnvironmentType)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label class="control-label">Server Name</label>
            <InputText class="form-control" @bind-Value="Database!.ServerName" />
        </div>
        <div class="form-group">
            <label class="control-label">Database Name</label>
            <InputText class="form-control" @bind-Value="Database!.DatabaseName" />
        </div>
        <div class="form-group">
            <label class="control-label">Authentication Type</label>
            <InputSelect class="form-control" @bind-Value="Database!.AuthenticationType">
                @foreach (var item in System.Enum.GetValues(typeof(barber.Enum.AuthenticationType)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label class="control-label">User Name</label>
            <InputText class="form-control" @bind-Value="Database!.UserName" />
        </div>
        <div class="form-group">
            <label class="control-label">Password</label>
            <InputText class="form-control" type="password" @bind-Value="Password" />
        </div>
        <div class="form-group">
            <label class="control-label">Description</label>
            <InputText class="form-control" @bind-Value="Database!.Description" />
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">Edit</button>
        </div>
    </form>
}

@code {
    [Parameter]
    public int Key { get; set; }

    [Microsoft.AspNetCore.Components.SupplyParameterFromForm]
    public Data.Models.DatabaseRequest? Database { get; set; }

    [Parameter]
    public string? Password { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var response = await _ReadRepository.SelectDatabaseByKey(Key);
        Database = new Data.Models.DatabaseRequest(response);
    }

    private async System.Threading.Tasks.Task Submit()
    {
        if (Database != null)
        {
            if (!string.IsNullOrEmpty(Password))
            {
                Database.PasswordHash = _SecurityService.Encrypt(Password);
            }
            Database.EditByUserName = "default";
            var result = await _WriteRepository.UpdateDatabase(Database);
            Navigation.NavigateTo("/database/list");
        }
    }
}
