@page "/execute"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = Security.Roles.Executor)]
@rendermode InteractiveServer
@inject NavigationManager Navigation;
@inject barber.Data.Interfaces.IExecuteRepository _ExecuteRepository;
@inject barber.Data.Interfaces.IReadRepository _ReadRepository;
@inject barber.Security.Services.IEncryptionService _EncryptionService;
@inject barber.Data.Interfaces.IWriteRepository _WriteRepository;

<PageTitle>Execute</PageTitle>

@if (Execution == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form method="post" @onsubmit="Submit" @formname="execute-form">
        <AntiforgeryToken />
        <div class="form-group">
            <label class="control-label">Statement</label>
            <InputSelect class="form-control" @bind-Value="Execution!.StatementKey">
                @foreach (var item in Statements!)
                {
                    <option value="@item.ItemKey">@item.ItemText</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label class="control-label">Database</label>
            <InputSelect class="form-control" @bind-Value="Execution!.DatabaseKey">
                @foreach (var item in Databases!)
                {
                    <option value="@item.ItemKey">@item.ItemText</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="submit">Execute</button>
        </div>
    </form>
}

@if (Result != null)
{
    @if (Result.IsSuccessful)
    {
        <div class="alert alert-success">Success: @Result.RowCount row(s) affected.</div>
    }
    else
    {
        <div class="alert alert-danger">Error: @Result.Exception?.Message</div>
    }
}

@code {
    public System.Collections.Generic.IEnumerable<Data.Models.ListResponse>? Databases { get; set; }

    [Microsoft.AspNetCore.Components.SupplyParameterFromForm]
    public Data.Models.ExecutionRequest? Execution { get; set; }

    public Data.Models.ExecuteResult? Result { get; set; }

    public System.Collections.Generic.IEnumerable<Data.Models.ListResponse>? Statements { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Databases = await _ReadRepository.SelectDatabaseList();
        Statements = await _ReadRepository.SelectApprovedStatementList();
        Execution = new Data.Models.ExecutionRequest();
    }

    private async System.Threading.Tasks.Task Submit()
    {
        if (Execution != null)
        {
            var statement = await _ReadRepository.SelectStatementByKey(Execution.StatementKey);
            var database = await _ReadRepository.SelectDatabaseByKey(Execution.DatabaseKey);
            if (statement.ApproveByUserName is null) throw new System.ArgumentNullException("ApproveByUserName");
            if (statement.ApproveDateTime is null) throw new System.ArgumentNullException("ApproveDateTime");
            if (statement.StatementText is null) throw new System.ArgumentNullException("StatementText");
            Execution.ExecuteByUserName = "default";
            Execution.ExecuteDateTime = System.DateTime.UtcNow;
            var password = string.IsNullOrWhiteSpace(database.PasswordHash) ? null : _EncryptionService.Decrypt(database.PasswordHash);
            var options = new Data.Models.ConnectionOptions(database.ServerName, database.DatabaseName, database.UserName, password);
            Result = _ExecuteRepository.ExecuteStatement(statement.StatementText, options);
            Execution.ExecuteMs = (long)System.DateTime.UtcNow.Subtract(Execution.ExecuteDateTime).TotalMilliseconds;
            Execution.RowCount = Result.RowCount;
            var writeResult = await _WriteRepository.InsertExecution(Execution);
        }
    }
}
